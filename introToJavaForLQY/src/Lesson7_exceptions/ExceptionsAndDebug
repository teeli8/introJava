
I.Bug

   我们写的代码有可能出现bug，也就是出错了。
   
  bug一般可以分为三种：
     1.编译出错。即编译器读不懂你写的东西。
              比如：漏了一个分号
     2.运行出错。编译器可以编译，但是跑的时候出现了它无法做出的操作。
              比如：尝试计算1/0
     3.结果出错。即可以编译，也可以执行，但是结果不符合预期。
              其实就是你写错了，比如想计算x+y写成了x-y。
              
  我们今天主要了解 2.  因为1. eclipse可以帮你排查，3.很好理解。
  以下是你需要注意的几个常见的异常/错误（你现在不用区分异常和错误）
  
     1.算法异常java.lang.ArithmeticException
               即计算了一些不能算的东西。
              比如：1 / 0
              
     
     2.array index大于范围  java.lang.ArrayIndexOutOfBoundsException 
              尝试调用一个固定长度的array大小范围外的东西。
              比如：int[] arr = new int[3];
		    int x = arr[10];         
     
     
     3.空指针      java.lang.NullPointerException
              尝试调用一个null对象里的内容。
              比如：   public static String str;   //global
              ...
              int length = str.length();
              
   
     4.栈溢出     java.lang.StackOverflowError
              递归的方法过多使栈溢出。什么是递归？跟栈有什么关系？我们在递归那一章里再讲。
              比如：
        public int bad(int x) {    //这是一个无尽的递归
		    bad(x+1);
		    return x;
	   }
	   
	   
II.Debug
    
      首先恭喜你！终于学到了这个激sang动xin人bing心kuang的章节！

   Debug一般分三步：
   
        1.测试，即看看有没有问题
        2.找出bug
        3.修复bug
        
        然后回到1. 继续测试，直到没有bug。
        
        测试：
                 测试的时候要注意，通常你要更多思考的不是一般的情况，而是极端的情况。
                 比如：我知道这段代码对于大部分正整数都好使，但是如果是0呢，如果是-1呢？
                 
       我们来实践一下，见java.
       
       找出bug：
              找bug是程序员最烦的事。
              找bug一般有几种办法。
              1.肉眼直接看。不过你要得有直接看出来的本事。等你的代码复杂了这就很难了。
              2.使用系统自带的debugger，设置breakpoint。我这个也不是很熟练。
              3.使用print跟踪代码。这是最简单最容易上手也十分有效的方法。推荐。
              
              我们重点来讲3.
                                
                                原理是： 我们通过添加print,来观察代码走到了哪里。比如说我在一个loop前写一个print(0),在loop里写一个print(1),
                                                那如果运行的时候我只看到了0没有看到1，说明这个loop压根没进去。如果既看到了0又看到了1，说明进入了loop。
              
              实践一下：见badloop()
              
     修复bug：
            
             如果是简单的bug，直接改过来就好。
             如果是很复杂的bug，需要考虑整个代码的逻辑。必要的时候应该重写。      
             下面重点讲那种不尴不尬只有在特殊情况下会出bug的修复方式。       
             一般有两种方法。
              1.手动在可能发生错误的地方剔除特殊情况。比较简单，适合新手。
              2.使用throw及try catch。
              
             把刚刚的badSub换成goodSub试试！ 
             
             所谓try catch, 就是尝试一段代码行不行，并且捕捉可能的异常。你可以简单了解一下。
             把试试有try catch的那个test    


扩展：一个令新手蛋疼的bug：值传递。

     首先看到两个方法changeInt和changeArr。
     我们可以看见他们除了参数的数据类型以外几乎一模一样。
   changeInt企图把参数变成1。
   changeArr企图把参数的第一项变成1。
   测试一下，你发现了什么？
   
   
   
   
   应该看到，changeInt失败了，但是changeArr成功了。
   为什么呢？
   简单来说，把x传进函数的时候，函数复制了一份x，相当于在函数内的一个局部变量。
   于是它只改变了局部变量的值，没有改变外部你声明的x的值。
   那为什么数列成功了呢?因为数列传入的是指针，函数复制的是指针，然后确实改变了指针指向的地址。
   你在说什么？什么是指针？如果你没有理解，没关系，给我打电话，这个需要当面给你画图。
   
   你需要记住的是：
       如果你一个函数的参数是原始类型或者String,永远不要企图你在调用函数后能改变它的值。
       同样，如果你在函数里改变了他的值，在调用结束后你可以认为这个值其实是没有被改变的（有时候你会希望它不被改变）。
       
  但如果你确实想改变它的值，应该怎么办？
      这个时候就需要进行封装。（有点麻烦，比起c++的直接传址java在这里有劣势）
      具体怎么做看看就行了。。原理就是新建一个简单的class


