用编程进行大量枚举的算法练习。

哥德巴赫猜想：

       著名的数学三大难题之一，至今还没有严格的证明。
       每年都会有很多人声称自己证明了哥德巴赫猜想，但是无一例外都是错的。
       最早的部分非严格“证明”，是在计算机发明后通过计算机枚举完成的。
       难倒了全人类的数学难题，转换成计算机问题其实是一个初学者都可以完成的算法。
       我们今天就来挑战一下。
       
       
       哥德巴赫猜想内容：
       
                     每一个大于2的偶数都可以写成两个质数的和。
       
       如：4 = 2 + 2
       6 = 3 + 3
       8 = 3 + 5
       ......
     
       在GBConjecture.java里完成验证吧！
    
   Tutorial:
             如你所见，主类里几乎什么都没有，你可以全部自己发挥！
             当然，如果觉得有些难，可以看看以下内容：
             
       1.你可能需要创建几个辅助方法(helpers):
          
          ・ isPrime(int): 之前你遇到过的一个方法，判断一个数是否是质数。
         
          ・ isGBTrue(int): 判断参数是否符合哥德巴赫猜想，即它是否能拆成两个质数的和。
                                                     如果判断为真，该方法应该print出这个数和对应的等式。
                                                     如：如果参数为4，该方法应该
                              println 4 = 2 + 2 
                                                            返还true
                                             
       2. 在你的main()里，你只需要把所有范围内的偶数依次用isGBTrue()判断即可。简单吧。
       
       3. 建议在main()里，写一些利于你debug的语句，比如：
          if(isGDTrue(n)){
             System.out.println("Goldbach is right!");
          }
          else{
             System.out.println("Goldbach is wrong! Why!");
          }
                    这样如果你看到第二句，说明你哪里写错了，因为isGDTrue()应该一直是true。
          
          同样的，当你的程序跑完，你应该能看到看到很多的 n = p1 + p2;
          你应该肉眼大概检查一下p1和p2是否真的是质数。
   
   
   
   附：虽然没有被证明但是大家还是普遍认为哥德巴赫猜想是真命题，主要原因有：
     1. 穷尽了计算机的内存空间也举不出反例。
     2. 欧拉说：虽然我不会证，但是我敢说它是对的。    
       
       
       
       
       