运算

在初步了解了类和类型之后，我们先学习如何在一个类里对数值进行运算。不用太想念hero类，
我们还会再见到它的。

I. 小学算数：

   + 加法。
   - 减法。
   * 乘法。
   / 除法。
   % 模运算(mod),即求余数。
   
      例：见operate类。
      
   问题：对于/来说，万一除不尽怎么办？
   回答：完成TODO1.
      
II. 直接赋值的算数：
   
   +=  ： x += 1  相当于 x = x + 1
   -=  : x -= 1   相当于 x = x - 1
      以此类推有*= ， /= ，%=
      
   ++ 与 -- ：   x++ , 访问x的值，然后令  x += 1;
               ++x , 先令 x += 1， 然后访问x的值。（以上对于x为整数）
               --同理。
               如果你现在不能理解x++ 和 ++x 的区别，不用担心，这种区别一般来讲只有在像这样
       int x = 0;
       int y = 0;
       y = x++;
       y = ++x;
              的时候才会出现，在这个阶段不建议你使用这种语句。Instead, 你可以直接用++
      如：x++;
       ++x;
       这样写在99.98%的情况下两者和x+=1是一样的。
       （虽然理论上来讲， x++ 比 ++x 更有可能出现莫名其妙的bug,但是反正我没遇到过。。所以你写哪种都行）
   
   
注1：以上运算的结果，默认与参与运算的数类型相同。比如 x + y, 如果x和y都是int，那么结果也是int，
    如果都是double，那么结果也是double。
    现阶段你应该避免使用不同的类型一起参与同一次运算。

注2：优先级。基本和数学一样，但是还是有地方区别，所以如果你想进行多部运算，如：
     int a = 1 + 2 * 3;
     请务必还是把小括号( )加上！
     int a = 1 + (2 * 3);
     运算中的所有括号都是小括号！中括号和大括号是不一样的意思！
     int a = (1 + (2 * 3)) / 4;

   
III. 逻辑运算：
          即判断正误。
     
     ==  是否全等，真正的“等于”
     >   是否大于
     <   是否小与
     >=  大于等于
     <=  小于等于
     !=  不等于
     
     思考题：见operate类TODO2
     
     
IV. 布尔运算：
         针对布尔型boolean的运算
         
    &&   逻辑和，判断前者和后者是否都是true
    ||   逻辑或，判断前者和后者是否有一个是true
    !    逻辑否，将true变为false，false变为true
    
        实例见operate类。
        
    前面运算, if, loop , 和 array 这几章可能有些枯燥，但是很重要哦！
    不管在什么语言里你都要熟练掌握他们。   
        
V. 以下内容了解为主：

   1. 判断符 ？
      int a , b;
      a = (b==0) ?  1 : 2;
      
            这个相当于
               if(b==0){
                    a = 1;
               }
               else { a = 2 ;}
        现阶段你还是应该用if else 而不是？
        
   2. 比特运算。
             把比较的数当做一串比特，比较每一位对应的值（即0或1）。
      
      &     比特和。
      |     比特或。
      ^     比特异或。
      ~     比特反转。
      
            有兴趣可以自己查一下。
            我需要你了解这个的原因是，你要知道&&和&是不一样的，不要弄混。
            以及指数运算不是用^，如果想表达2的3此方，得用别的办法。
        

   
   
   
   